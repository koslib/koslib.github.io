<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apis on koslib</title>
    <link>https://www.koslib.com/tags/apis/</link>
    <description>Recent content in apis on koslib</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.koslib.com/tags/apis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A simplistic explanation of the entity services anti-pattern</title>
      <link>https://www.koslib.com/posts/entity-services-anti-pattern/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.koslib.com/posts/entity-services-anti-pattern/</guid>
      <description>Lately, I&amp;rsquo;ve been participating in discussions where microservices patterns are the hottest topic.
People coming from Java background most of the time go for a software design comprised of entity services. Spring even has a tutorial about creating entity services. Microsoft does too. That nearly explains why, I presume.
In this post, I will explain my view on this anti-pattern.
Backgound Once upon a time, there was a huge monolith. It started as a great initiative and helped the dev team release features easily and, frankly, quite fast especially in the beginning.</description>
    </item>
    
  </channel>
</rss>
